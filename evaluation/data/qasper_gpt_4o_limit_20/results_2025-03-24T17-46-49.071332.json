{
  "results": {
    "qasper_bool": {
      "alias": "qasper_bool",
      "exact_match,get-answer": 0.45,
      "exact_match_stderr,get-answer": 0.11413288653790232
    },
    "qasper_freeform": {
      "alias": "qasper_freeform",
      "f1_abstractive,none": 0.08248518075270896,
      "f1_abstractive_stderr,none": 0.02081876505204731
    }
  },
  "group_subtasks": {
    "qasper_bool": [],
    "qasper_freeform": []
  },
  "configs": {
    "qasper_bool": {
      "task": "qasper_bool",
      "tag": "qasper",
      "dataset_path": "allenai/qasper",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x13f973d80>, set_answer_type='bool')",
      "doc_to_text": "def doc_to_text_bool(doc):\n    return (\n        \"You are a strict boolean answerer. Only say 'yes' or 'no'.\\n\"\n        f\"TITLE: {doc['title']}\\n\"\n        f\"ABSTRACT: {doc['abstract']}\\n\"\n        f\"QUESTION: {doc['question']}\\n\"\n        f\"ANSWER:\"\n    )\n",
      "doc_to_target": "def doc_to_target_bool(doc):\n    return doc[\"answer\"].lower()\n",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n",
          "."
        ],
        "max_gen_toks": 5
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "get-answer",
          "filter": [
            {
              "function": "lowercase"
            },
            {
              "function": "regex",
              "regex_pattern": "\\b(?:yes|no)\\b"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "model": "gpt-4o"
      }
    },
    "qasper_freeform": {
      "task": "qasper_freeform",
      "tag": "qasper",
      "dataset_path": "allenai/qasper",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "functools.partial(<function process_docs at 0x13fe9ae80>, set_answer_type='free form answer')",
      "doc_to_text": "TITLE: {{title}}\nABSTRACT: {{abstract}}\n\nQ: {{question}}\n\nA:",
      "doc_to_target": "answer",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "def f1_abstractive(predictions, references):\n    \"\"\"\n    Taken from the official evaluation script for v1.1 of the SQuAD dataset.\n    \"\"\"\n    prediction_tokens = normalize_answer(predictions[0]).split()\n    references_tokens = normalize_answer(references[0]).split()\n    common = Counter(prediction_tokens) & Counter(references_tokens)\n    num_same = sum(common.values())\n    if num_same == 0:\n        return 0\n    precision = 1.0 * num_same / len(prediction_tokens)\n    recall = 1.0 * num_same / len(references_tokens)\n    f1 = (2 * precision * recall) / (precision + recall)\n    return f1\n",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ]
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0,
        "model": "gpt-4o"
      }
    }
  },
  "versions": {
    "qasper_bool": 1.0,
    "qasper_freeform": 2.0
  },
  "n-shot": {
    "qasper_bool": 0,
    "qasper_freeform": 0
  },
  "higher_is_better": {
    "qasper_bool": {
      "exact_match": true
    },
    "qasper_freeform": {
      "f1_abstractive": true
    }
  },
  "n-samples": {
    "qasper_freeform": {
      "original": 431,
      "effective": 20
    },
    "qasper_bool": {
      "original": 208,
      "effective": 20
    }
  },
  "config": {
    "model": "openai-chat-completions",
    "model_args": "model=gpt-4o",
    "batch_size": "auto",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": 20.0,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "1afb190c",
  "date": 1742805952.865815,
  "pretty_env_info": "PyTorch version: 2.6.0\nIs debug build: False\nCUDA used to build PyTorch: None\nROCM used to build PyTorch: N/A\n\nOS: macOS 15.3.2 (arm64)\nGCC version: Could not collect\nClang version: 16.0.0 (clang-1600.0.26.6)\nCMake version: Could not collect\nLibc version: N/A\n\nPython version: 3.13.2 (main, Feb  4 2025, 14:51:09) [Clang 16.0.0 (clang-1600.0.26.6)] (64-bit runtime)\nPython platform: macOS-15.3.2-arm64-arm-64bit-Mach-O\nIs CUDA available: False\nCUDA runtime version: No CUDA\nCUDA_MODULE_LOADING set to: N/A\nGPU models and configuration: No CUDA\nNvidia driver version: No CUDA\ncuDNN version: No CUDA\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nApple M4\n\nVersions of relevant libraries:\n[pip3] numpy==2.2.4\n[pip3] torch==2.6.0\n[conda] Could not collect",
  "transformers_version": "4.50.0",
  "lm_eval_version": "0.4.8",
  "upper_git_hash": null,
  "task_hashes": {
    "qasper_freeform": "9f165e40487d56abf46f35eae86b7672167b45f0ff501666eca0e6bcc6fab4ef",
    "qasper_bool": "6b40f8e2716b9bc17b5f382be0bd196b11926ba4c6e82d1aa408e4e3e3cf7b1e"
  },
  "model_source": "openai-chat-completions",
  "model_name": "gpt-4o",
  "model_name_sanitized": "gpt-4o",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": "",
  "chat_template_sha": null,
  "start_time": 129549.741655541,
  "end_time": 129606.847486,
  "total_evaluation_time_seconds": "57.105830458996934"
}